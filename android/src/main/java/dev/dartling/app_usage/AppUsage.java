// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.dartling.app_usage;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class AppUsage {

  public enum ResultState {
    success(0),
    error(1);

    private int index;
    private ResultState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TimeLimitResult {
    private @NonNull ResultState state;
    public @NonNull ResultState getState() { return state; }
    public void setState(@NonNull ResultState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    private @NonNull String message;
    public @NonNull String getMessage() { return message; }
    public void setMessage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"message\" is null.");
      }
      this.message = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private TimeLimitResult() {}
    public static final class Builder {
      private @Nullable ResultState state;
      public @NonNull Builder setState(@NonNull ResultState setterArg) {
        this.state = setterArg;
        return this;
      }
      private @Nullable String message;
      public @NonNull Builder setMessage(@NonNull String setterArg) {
        this.message = setterArg;
        return this;
      }
      public @NonNull TimeLimitResult build() {
        TimeLimitResult pigeonReturn = new TimeLimitResult();
        pigeonReturn.setState(state);
        pigeonReturn.setMessage(message);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("state", state == null ? null : state.index);
      toMapResult.put("message", message);
      return toMapResult;
    }
    static @NonNull TimeLimitResult fromMap(@NonNull Map<String, Object> map) {
      TimeLimitResult pigeonResult = new TimeLimitResult();
      Object state = map.get("state");
      pigeonResult.setState(state == null ? null : ResultState.values()[(int)state]);
      Object message = map.get("message");
      pigeonResult.setMessage((String)message);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UsedApp {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull String name;
    public @NonNull String getName() { return name; }
    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    private @NonNull Long minutesUsed;
    public @NonNull Long getMinutesUsed() { return minutesUsed; }
    public void setMinutesUsed(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"minutesUsed\" is null.");
      }
      this.minutesUsed = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private UsedApp() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable Long minutesUsed;
      public @NonNull Builder setMinutesUsed(@NonNull Long setterArg) {
        this.minutesUsed = setterArg;
        return this;
      }
      public @NonNull UsedApp build() {
        UsedApp pigeonReturn = new UsedApp();
        pigeonReturn.setId(id);
        pigeonReturn.setName(name);
        pigeonReturn.setMinutesUsed(minutesUsed);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("name", name);
      toMapResult.put("minutesUsed", minutesUsed);
      return toMapResult;
    }
    static @NonNull UsedApp fromMap(@NonNull Map<String, Object> map) {
      UsedApp pigeonResult = new UsedApp();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object minutesUsed = map.get("minutesUsed");
      pigeonResult.setMinutesUsed((minutesUsed == null) ? null : ((minutesUsed instanceof Integer) ? (Integer)minutesUsed : (Long)minutesUsed));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class AppUsageApiCodec extends StandardMessageCodec {
    public static final AppUsageApiCodec INSTANCE = new AppUsageApiCodec();
    private AppUsageApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return TimeLimitResult.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return UsedApp.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof TimeLimitResult) {
        stream.write(128);
        writeValue(stream, ((TimeLimitResult) value).toMap());
      } else 
      if (value instanceof UsedApp) {
        stream.write(129);
        writeValue(stream, ((UsedApp) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AppUsageApi {
    void getPlatformVersion(Result<String> result);
    void getApps(Result<List<UsedApp>> result);
    void setAppTimeLimit(@NonNull String appId, @NonNull Long durationInMinutes, Result<TimeLimitResult> result);

    /** The codec used by AppUsageApi. */
    static MessageCodec<Object> getCodec() {
      return AppUsageApiCodec.INSTANCE;
    }

    /** Sets up an instance of `AppUsageApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AppUsageApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppUsageApi.getPlatformVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getPlatformVersion(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppUsageApi.getApps", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<List<UsedApp>> resultCallback = new Result<List<UsedApp>>() {
                public void success(List<UsedApp> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getApps(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppUsageApi.setAppTimeLimit", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String appIdArg = (String)args.get(0);
              if (appIdArg == null) {
                throw new NullPointerException("appIdArg unexpectedly null.");
              }
              Number durationInMinutesArg = (Number)args.get(1);
              if (durationInMinutesArg == null) {
                throw new NullPointerException("durationInMinutesArg unexpectedly null.");
              }
              Result<TimeLimitResult> resultCallback = new Result<TimeLimitResult>() {
                public void success(TimeLimitResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAppTimeLimit(appIdArg, (durationInMinutesArg == null) ? null : durationInMinutesArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
